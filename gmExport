// 导出 gmgn.ai 的 localStorage 中 wallet_mark_multichain key 的内容
function exportStorageKey(key = 'wallet_mark_multichain', storageType = 'localStorage', fileName = 'wallet_mark_multichain.json') {
  try {
    // 选择存储类型
    const storage = storageType === 'localStorage' ? localStorage : sessionStorage;

    // 获取 key 的值
    const data = storage.getItem(key);

    // 检查 key 是否存在
    if (data === null) {
      console.error(`Error: Key "${key}" not found in ${storageType}.`);
      return;
    }

    // 尝试解析为 JSON 并格式化
    let formattedData;
    try {
      const parsedData = JSON.parse(data);
      formattedData = JSON.stringify(parsedData, null, 2); // 格式化 JSON，缩进 2 个空格
    } catch (e) {
      // 如果不是 JSON，直接使用原始数据
      console.warn(`Warning: "${key}" is not valid JSON, exporting as raw string.`);
      formattedData = data;
    }

    // 输出到控制台，便于调试
    console.log(`Content of "${key}":`, formattedData);

    // 创建 Blob 对象用于下载
    const blob = new Blob([formattedData], { type: 'application/json' });

    // 创建临时下载链接
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = fileName; // 指定下载文件名
    document.body.appendChild(a); // 添加到 DOM
    a.click(); // 触发下载

    // 清理
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    console.log(`Successfully exported "${key}" to ${fileName}`);
  } catch (error) {
    console.error('Export failed:', error.message);
  }
}

// 直接调用，导出 wallet_mark_multichain
exportStorageKey('wallet_mark_multichain', 'localStorage', 'wallet_mark_multichain.json');
